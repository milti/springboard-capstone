load("~/R/github/springboard capstone/my_oauth.Rdata")
botAccts <- lookupUsers(newBotlist)
botAcctlist <- twListToDF(botAccts)
load("springboard\ capstone.Rproj")
library(caret)
library(igraph)
library(twitteR)
library(streamR)
library(RNeo4j)
library(tidyverse)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumer_key <- 'QpSBwPC1PwqUQ4eSMCVeXenDQ'
consumer_secret <- '39YRwPaXF9u3TCvjqFaElSxmEEe7xcUJTzg0M2oa3egutPa6B4'
access_token <- '1240280636-GFbqEWiGKiP17KmN4oyrFwdZwQBJEJA3BRy2TmW'
access_secret <- 'vsnTNryz83p0XS4rSz6dwOmGRf0SZC2pPtxGnAkvUikSR'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
library(reticulate)
library(XML)
path_to_python <- "/usr/local/bin/python3.6"
use_python(path_to_python)
dbot=import("debot")
db = dbot$DeBot('YocR3mKAc7U6hjKZrNnOCk2jjnWrqgSfwWYo8yOb')#This is my API key
#bots=htmlParse(db$get_related_bots('election2016'))#Change 'election2016' to any other topic of your interest
jbots=htmlParse(db$get_related_bots('jemele'))
#Now parse the XML data into a dataframe
jbotlist <- xmlToList(jbots)
library(listviewer)
jflatbot <- flatten(jbotlist)
jflatterbot <- flatten(jflatbot)
remove(jflatbot)
jflatbot <- flatten(jflatterbot)
jnewBotlist <- unname(sapply(jflatbot, `[`, 2))
#my_oauth <- OAuthFactory$new(consumerKey=consumer_key,consumerSecret=consumer_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
#my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
#save(my_oauth, file = "my_oauth.Rdata")
load("~/R/github/springboard capstone/my_oauth.Rdata")
knitr::opts_chunk$set(echo = TRUE)
head(fromAccts)
unlistedBots <- unlist(botAcctlist[]$screenName)
botdetails <- map(unlistedBots[], ~searchTwitteR(.x, n=100))
botDF <- twListToDF(flatten(botdetails))
botRT <- filter(botDF, isRetweet == "TRUE")
botOPEN <- filter(botDF, isRetweet != "TRUE")
acctRT <- word(botRT$text, 2)
library(purrr)
acctRT <- word(botRT$text, 2)
library(stringr)
acctRT <- word(botRT$text, 2)
unique(as.character(sort(acctRT)))
remove(films)
jbots=htmlParse(db$get_related_bots('jemele'))
remove(people)
remove(planet_lookup)
remove(planets)
remove(spec())
remove(species
)
remove(starships)
remove(vehicles)
remove(testing_set)
remove(training_set)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(igraph)
library(twitteR)
library(streamR)
library(RNeo4j)
library(tidyverse)
library(springr)
library(reticulate)
library(XML)
library(stringr)
remove(in_train)
jbots=htmlParse(db$get_related_bots('jemele'))
library(caret)
library(igraph)
library(twitteR)
library(streamR)
library(RNeo4j)
library(tidyverse)
library(reticulate)
library(XML)
path_to_python <- "/usr/local/bin/python3.6"
use_python(path_to_python)
dbot=import("debot")
db = dbot$DeBot('YocR3mKAc7U6hjKZrNnOCk2jjnWrqgSfwWYo8yOb')#This is my API key
#bots=htmlParse(db$get_related_bots('election2016'))#Change 'election2016' to any other topic of your interest
jbots=htmlParse(db$get_related_bots('jemele'))
jbots=htmlParse(db$get_related_bots('jemele'))
?paste
jbots=htmlParse(db$get_related_bots('jemele'))
jbots
knitr::opts_chunk$set(echo = TRUE)
kbots=htmlParse(db$get_related_bots('taketheknee'))
library(reticulate)
library(XML)
kbots=htmlParse(db$get_related_bots('taketheknee'))
library(caret)
library(igraph)
library(twitteR)
library(streamR)
library(RNeo4j)
library(tidyverse)
library(stringr)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumer_key <- 'QpSBwPC1PwqUQ4eSMCVeXenDQ'
consumer_secret <- '39YRwPaXF9u3TCvjqFaElSxmEEe7xcUJTzg0M2oa3egutPa6B4'
access_token <- '1240280636-GFbqEWiGKiP17KmN4oyrFwdZwQBJEJA3BRy2TmW'
access_secret <- 'vsnTNryz83p0XS4rSz6dwOmGRf0SZC2pPtxGnAkvUikSR'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
library(reticulate)
library(XML)
path_to_python <- "/usr/local/bin/python3.6"
use_python(path_to_python)
dbot=import("debot")
db = dbot$DeBot('YocR3mKAc7U6hjKZrNnOCk2jjnWrqgSfwWYo8yOb')#This is my API key
kbots=htmlParse(db$get_related_bots('taketheknee'))
kbotlist <- xmlToList(kbots)
library(listviewer)
kflatbot <- flatten(kbotlist)
kflatterbot <- flatten(kflatbot)
remove(kflatbot)
kflatbot <- flatten(kflatterbot)
load("~/R/github/springboard capstone/my_oauth.Rdata")
knewBotlist <- unname(sapply(kflatbot, `[`, 2))
kbotAccts <- lookupUsers(knewBotlist)
kbotAcctlist <- twListToDF(kbotAccts)
remove(kbotAcctlist)
remove(knewBotlist)
remove(kbotAccts)
remove(kbotlist)
remove(kbots)
remove(kflatbot)
remove(kflatterbot)
save.image("~/R/github/springboard capstone/capstone.RData")
load("~/R/github/springboard capstone/capstone.RData")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(listviewer)
library(reticulate)
library(XML)
library(caret)
library(igraph)
library(twitteR)
library(streamR)
library(RNeo4j)
library(tidyverse)
library(stringr)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumer_key <- 'QpSBwPC1PwqUQ4eSMCVeXenDQ'
consumer_secret <- '39YRwPaXF9u3TCvjqFaElSxmEEe7xcUJTzg0M2oa3egutPa6B4'
access_token <- '1240280636-GFbqEWiGKiP17KmN4oyrFwdZwQBJEJA3BRy2TmW'
access_secret <- 'vsnTNryz83p0XS4rSz6dwOmGRf0SZC2pPtxGnAkvUikSR'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
install.packages(c("backports", "BH", "bookdown", "boot", "condvis", "corrplot", "crayon", "curl", "data.table", "devtools", "doParallel", "dplyr", "GGally", "ggrepel", "gridExtra", "httr", "ini", "knitr", "Lahman", "lme4", "Matrix", "mgcv", "NLP", "openssl", "psych", "purrr", "Rcpp", "repurrrsive", "reshape", "reticulate", "rlang", "rstudioapi", "scales", "shiny", "swirlify", "tibble", "tidyr", "tidyselect"))
library(rvest)
library(httr)
sessionInfo()
library(rvest)
sessionInfo()
TI_html <- html("http://www.textinspector.com/workflow")
??rvest
?rvest
str(TI_html)
TI_html
library(stringr)
library(stringr)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumer_key <- 'QpSBwPC1PwqUQ4eSMCVeXenDQ'
TI_html <- read_html("http://www.textinspector.com/workflow")
str(TI_html)
TI_html
TI_html %>%
html_node(.span12)
TI_html %>%
html_node(span12)
TI_html %>%
TI_html %>%
html_nodes("//span12")
html_nodes("@span12")
?saveRDS
?save
save(botAcctlist, botAccts, botdetails, botDF, botDS, botlist, flatbot, flatterbot, newBOtlist, recentTweetsDF, recentTweetsDS, twitter, file = "myObjects")
save(botAcctlist, botAccts, botdetails, botDF, botDS, botlist, flatbot, flatterbot, newBotlist, recentTweetsDF, recentTweetsDS, twitter, file = "myObjects")
?remove
remove(botAcctlist, botAccts, botdetails, botDF, botDS, botlist, flatbot, flatterbot, newBotlist, recentTweetsDF, recentTweetsDS, twitter)
save(access_secret, access_token, accessURL, acctNames, acctRT, bots, consumer_key, consumer_secret, my_oauth, path_to_python, requestURL, unlistedBots, file = "myValues")
remove(access_secret, access_token, accessURL, acctNames, acctRT, bots, consumer_key, consumer_secret, my_oauth, path_to_python, requestURL, unlistedBots)
ls()
save(botOPEN, botRT, db, dbot, TI_html, tweetsOPEN, tweetsRT, tweeters, authURL, file = "activeData")
install.packages(c("qdapRegex", "qdapTools", "qdapDictionaries", "qdap"))
detach("package:utils", unload=TRUE)
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(c("irlba", "ISLR", "purrr"))
install.packages("RSelenium")
install.packages("RSelenium")
library(RSelenium)
load("myObjects")
load("~/R/github/springboard capstone/capstone dataset/brooklyn.Rdata")
View(botDS)
saveRDS(botAcctlist, "botAcctlist")
saveRDS(botAccts, "botAccts")
saveRDS(botdetails, "botdetails")
remove(botdetails)
saveRDS(botDF, "botDF")
saveRDS(botDS, "botDS")
saveRDS((botOPEN, "botOPEN"))
saveRDS(botOPEN, "botOPEN")
saveRDS(botRT, "botRT")
saveRDS(recentTweetsDF, "recentTweetsDF")
saveRDS(recentTweetsDS, "recentTweetsDS")
?saveRDS
saveRDS(tweetsOPEN)
saveRDS(tweetsOPEN), "tweetsOPEN"
saveRDS(tweetsOPEN), "tweetsOPEN")
saveRDS(tweetsOPEN, "tweetsOPEN")
saveRDS(tweetsRT, "tweetsRT")
saveRDS(twitter, "twitter")
save(access_secret, access_token, accessURL, "accessObjs")
save(access_secret, access_token, accessURL, file = "accessObjs")
remove(access_secret, access_token, accessURL)
load("accessObjs")
save(access_secret, access_token, accessURL, authURL, my_oauth, requestURL, consumer_key, consumer_secret, file = "accessObjs")
remove(access_secret, access_token, accessURL, authURL, my_oauth, requestURL, consumer_key, consumer_secret)
remove(botAcctlist)
remove(botAccts)
remove(botlist)
remove(recentTweetsDS)
View(botDF)
remove(botDF)
remove(recentTweetsDF)
save(access_secret, access_token, accessURL, authURL, my_oauth, requestURL, consumer_key, consumer_secret, pgmfrom, pgsession, result, file = "accessObjs")
save(access_secret, access_token, accessURL, authURL, my_oauth, requestURL, consumer_key, consumer_secret, pgmform, wkForm, wkSession, workFlow, TI_html, filled_form, filled_wkForm, txtInspect, result, pgsession, result, file = "accessObjs")
load("accessObjs")
save(access_secret, access_token, accessURL, authURL, my_oauth, requestURL, consumer_key, consumer_secret, pgmform, wkForm, wkSession, workFlow, TI_html, filled_form, filled_wkForm, txtInspect, result, pgsession, result, file = "accessObjs")
remove(access_secret, access_token, accessURL, authURL, my_oauth, requestURL, consumer_key, consumer_secret, pgmform, wkForm, wkSession, workFlow, TI_html, filled_form, filled_wkForm, txtInspect, result, pgsession, result)
load("accessObjs")
remove(access_secret, access_token, accessURL, authURL, my_oauth, requestURL, consumer_key, consumer_secret, pgmform, wkForm, wkSession, workFlow, TI_html, filled_form, filled_wkForm, txtInspect, result, pgsession, result)
saveRDS(newBotlist, "newBotlist")
save(db, dbot, flatbot, flatterbot, acctNames, acctRT, bots, path_to_python, tweeters, unlistedBots  file = "Objets")
save(db, dbot, flatbot, flatterbot, acctNames, acctRT, bots, path_to_python, tweeters, unlistedBots, file = "Objets")
remove(db, dbot, flatbot, flatterbot, acctNames, acctRT, bots, path_to_python, tweeters, unlistedBots)
botDS %>%
print(botDS$botAcctlist.screenName)
library(tidyverse)
botDS %>%
print(botDS$botAcctlist.screenName)
botDS %>%
print(botDS$botAcctlist.screenName[[]])
botDS %>%
rowname(botDS)
rowname(botDS)
?rowname
??rowname
rownames(botDS)
botDS$botAcctlist.screenName
botDS$botAcctlist.screenName[1:3]
botDS$botAcctlist.screenName[[1:3]]
botDS$botAcctlist.screenName[[1]]
class(botDS$botAcctlist.screenName)
as.array(botDS$botAcctlist.screenName)
as.vector(botDS$botAcctlist.screenName)
as.vector(botDS$botAcctlist.screenName)[1:3]
sampleDF <- as.vector(botDS$botAcctlist.screenName)[1:3]
sampleDF
sampleDF %>%
print()
as.data.frame(sampleDF) <- as.vector(botDS$botAcctlist.screenName)[1:3]
sample <- as.vector(botDS$botAcctlist.screenName)[1:3]
remove(sampleDF)
samDF <- data.frame(as.vector(botDS$botAcctlist.screenName)[1:3])
str(samDF)
samDF %>%
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName == x)$text, collapse = " | "))
samDF %>%
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName == x[])$text, collapse = " | "))
samDF %>%
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName == x.text, collapse = " | "))
samDF %>%
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName == x.text, collapse = " | ")))
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName == x.text)))
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName == x$text)))
samDF %>%
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName == x.text)))
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName == text)))
samDF %>%
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName == text)))
samDF %>%
samDF$text <- unlist(paste(filter(tweetsOPEN, screenName)))
samDF %>%
samDF %>%
unlist(paste(filter(tweetsOPEN, screenName == samDF[[]])))
samDF %>%
filter(tweetsOPEN$screenName == [])
samDF$as.vector.botDS.botAcctlist.screenName..1.3.
remove(samDF)
samDF <- data.frame(as.character(botDS$botAcctlist.screenName)[1:3])
class(samDF)
samDF
samDF[1]
colname(samDF) <- screenName
colname(samDF) <- "screenName"
colnames(samDF) <- "screenName"
samDF[1]
samDF %>%
filter(tweetsOPEN$screenName == [])
filter(tweetsOPEN$screenName == x)
for name in samDF$screenName
samDF %>%
for name in samDF$screenName
tweetsOPEN %>%
group_by(screenName)
names(tweetsOPEN)
ls()
groupedTweetsDF <- readRDS("capstone dataset/groupedTweetsDF")
View(groupedTweetsDF)
length(unique(groupedTweetsDF))
length(unique(groupedTweetsDF$screenName))
groupedTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
filter(tweetsOPEN, screenName %in% botDS$screenName)
library(tidyverse)
groupedTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
filter(tweetsOPEN, screenName %in% botDS$screenName)
groupedTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
filter(tweetsOPEN, screenName %in% botDS$screenName)
groupedTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
groupedTweetsDF <- tweetsOPEN %>%
group_by(screenName)
groupedTweetsDF %>%
length(unique(groupedTweetsDF$screenName))
selectedTweetsDF <- groupedTweetsDF %>%
filter(, screenName %in% botDS$botAcctlist.screenName)
selectedTweetsDF <- groupedTweetsDF %>%
select(, screenName %in% botDS$botAcctlist.screenName)
selectedTweetsDF <- groupedTweetsDF %>%
select(groupedTweetsDF$screenName %in% botDS$botAcctlist.screenName)
selectedTweetsDF <- groupedTweetsDF %>%
filter(groupedTweetsDF$screenName %in% botDS$botAcctlist.screenName)
selectedTweetsDF <- groupedTweetsDF %>%
select(groupedTweetsDF$screenName %in% botDS$botAcctlist.screenName)
knitr::opts_chunk$set(echo = TRUE)
columnnames <- names(botDS)
columnnames[1] <- "screenName"
columnnames[2] <- "ID"
columnnames[3] <- "acct_created"
columnnames[4] <- "statusesCount"
colnames(botDS) <- columnnames
groupedTweetsDF <- readRDS("capstone dataset/groupedTweetsDF")
length(unique(groupedTweetsDF$screenName))
knitr::opts_chunk$set(echo = TRUE)
saveRDS(groupedTweetsDF, "groupedTweetsDF")
names(groupedTweetsDF)
?select
sessionInfo()
library(dplyr)
sessionInfo()
?select
selectedTweetsDF <- select(groupedTweetsDF, screenName %in% botDS$screenName)
selectedTweetsDF <- select(groupedTweetsDF$screenName %in% botDS$screenName)
?filter
selectedTweetsDF <- filter(groupedTweetsDF$screenName %in% botDS$screenName)
selectedTweetsDF <- filter(groupedTweetsDF$screenName %in% botDS$screenName[])
?select
??dplyr
filter(groupedTweetsDF, screenName %in% botDS$screenName)
groupedTweetsDF[screenName %in% botDS$screenName]
groupedTweetsDF[screenName %in% botDS$screenName[]]
remove(samDF)
remove(sample)
selectedTweetsDF <- groupedTweetsDF %>%
filter(screenName %in% botDS$screenName)
length(unique(selectedTweetsDF))
length(unique(selectedTweetsDF$screenName))
saveRDS(selectedTweetsDF, "selectedTweetsDF")
newDF <- tweetsOPEN %>%
group_by(screenName) %>%
filter(screenName %in% botDS$screenName)
identical(selectedTweetsDF, newDF)
groupedTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
filter(screenName %in% botDS$screenName)
saveRDS(groupedTweetsDF, "groupedTweetsDF")
remove(selectedTweetsDF)
remove(newDF)
length(unique(groupedTweetsDF))
length(unique(groupedTweetsDF$screenName))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
filter(screenName !%in% botDS$screenName)
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
!filter(screenName !%in% botDS$screenName)
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
!(filter(screenName !%in% botDS$screenName))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
!(filter(screenName %in% botDS$screenName))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
setdiff(filter(screenName %in% botDS$screenName))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
subset(!(filter(screenName %in% botDS$screenName)))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
!(filter(screenName %in% botDS$screenName))
distaffTweetsDF <- tweetsOPEN %>%
castoffDF <- setdiff(tweetsOPEN, groupedTweetsDF)
?setdiff
castoffDF <- setdiff(tweetsOPEN, groupedTweetsDF)
saveRDS(castoffTweetsDF, "castoffTweetsDF")
saveRDS(castoffDF, "castoffDF")
groupedTweetsDF %>%
unlist(paste(screenNme$text, collapse = "!"))
groupedTweetsDF %>%
unlist(paste(screenName$text, collapse = "!"))
groupedTweetsDF %>%
unlist(paste(group_by(screenName)$text, collapse = "!"))
groupedTweetsDF %>%
group_by(screenName)
groupedTweetsDF %>%
group_by(screenName) %>%
unlist(paste(text()))
groupedTweetsDF %>%
group_by(screenName) %>%
unlist(paste(text)
)
groupedTweetsDF %>%
group_by(screenName) %>%
name <- screenName[]
groupedTweetsDF %>%
for name in unique(screenName) {}
groupedTweetsDF %>%
for name in unique(screenName) { paste(filter(tweetsOPEN, screenName == name)$text)}
for name in unique(tweetsOPEN$screenName) { paste(filter(tweetsOPEN, screenName == name)$test)}
for (name in unique(tweetsOPEN$screenName)) { paste(filter(tweetsOPEN, screenName == name)$test)}
traceback()
botDS$langDiv <- map(tweetsOPEN$screenName[], ~paste(filter(tweetsOPEN, screenName == .x)$text))
sessionInfo()
library(tidyverse)
botDS$langDiv <- map(tweetsOPEN$screenName[], ~paste(filter(tweetsOPEN, screenName == .x)$text))
botDS$langDiv
library(quanteda)
library(koRpus)
names(botDS)
tweetsOPEN %>%
for (name in screenName[]) { print(screenName)}
for (name in unique(tweetsOPEN$screenName) { print(name)})
for(name in unique(tweetsOPEN$screenName) { print(name)})
length(unique(groupedTweetsDF$screenName))
View(botDS)
groupedTweetsDF %>%
groupedTweetsDF %>%
groupedTweetsDF$langDiv <- textstat_lexdiv(groupedTweetsDF$text)
groupedTweetsDF$langDiv <- textstat_lexdiv(dfm(groupedTweetsDF$text))
View(botDS)
View(groupedTweetsDF)
traceback()
names(groupedTweetsDF)
groupedTweetsDF$langDiv
langDiv <- textstat_lexdiv(dfm(groupedTweetsDF$text))
str(langDiv)
groupedTweetsDF$langDiv <- langDiv$TTR
View(groupedTweetsDF)
botDiv <- groupedTweetsDF %>%
group_by(screenName)
botDiv <- groupedTweetsDF %>%
group_by(screenName) %>%
summarise(meanDiv = mean(langDiv))
str(botDiv)
View(botDiv)
left_join(botDS, botDiv)
View(botDS)
botDS <- left_join(botDS, botDiv)
View(botDS)
str(s)
str(newBotlist)
View(groupedTweetsDF)
View(newBotlist)
as.numeric(as.POSIXct(botDS$acct_created[1]))
load("capstone dataset/Objets")
str(twitter)
remove(twitter)
saveRDS(botDS, "botDS")
saveRDS(groupedTweetsDF, "groupedTweetsDF")
remove(acctNames)
remove(acctRT)
remove(bots)
remove(name)
remove(path_to_python)
remove(unlistedBots)
remove(db)
remove(dbot)
remove(flat'')
remove(flatbot)
remove(flatterbot)
saveRDS(langDiv, "langDiv")
langDiv
savehistory("~/R/github/springboard capstone/20171031.Rhistory")
