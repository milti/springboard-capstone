config(token = twitter_token))
stop_for_status(req)
content(req)
myapp <- oauth_app("twitter",
key = "OHIL9V7v7LikVwie2Vc3ltRxz",
secret = "IMqsEB0p1H7JeBZ5qGMXZUjqhppwbLi2SZxCQFVga8c4TNCRu7")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
oauth_endpoints("twitter")
myapp <- oauth_app("twitter",
key = "OHIL9V7v7LikVwie2Vc3ltRxz",
secret = "IMqsEB0p1H7JeBZ5qGMXZUjqhppwbLi2SZxCQFVga8c4TNCRu7")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
oauth_endpoints("twitter")
myapp <- oauth_app("twitter",
key = "OHIL9V7v7LikVwie2Vc3ltRxz",
secret = "IMqsEB0p1H7JeBZ5qGMXZUjqhppwbLi2SZxCQFVga8c4TNCRu7")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app("twitter",
key = "OHIL9V7v7LikVwie2Vc3ltRxz",
secret = "IMqsEB0p1H7JeBZ5qGMXZUjqhppwbLi2SZxCQFVga8c4TNCRu7")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
library(httr)
# 1. Find OAuth settings for twitter:
#    https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
#    Make sure to set callback url to "http://127.0.0.1:1410/"
#
#    Replace key and secret below
myapp <- oauth_app("twitter",
key = "TYrWFPkFAkn4G5BbkWINYw",
secret = "qjOkmKYU9kWfUFWmekJuu5tztE9aEfLbt26WlhZL8"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
content <- content(req)
View(content)
cons <- twListToDF(content)
str(content)
tw.bogor = searchTwitter("bogor", n=500)
recentTweetsDS2 <- map(unlistedBots[], ~searchTwitteR(.x, resultType = "recent", n=200))
content(req)
recentTweetsDS2 <- map(unlistedBots[], ~searchTwitteR(.x, resultType = "recent", n=200))
Sys.setenv(http_proxy="http://username:pass@proxy:port")
Sys.setenv(https_proxy="http://username:pass@proxy:port")
recentTweetsDS2 <- map(unlistedBots[], ~searchTwitteR(.x, resultType = "recent", n=200))
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
consumer_key <- 'qkgJvUbFX70rNn1K4uq9NAuVs'
consumer_secret <- 'xOGEeIMUUTrCTkVwGXXwdu75kqVzEq2yzDJuZPrBwt9NfwwFJm'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
access_token <- ' 1240280636-lHi3fdKVZGNE6FsUlvY7y13RsqED0JQgmKY9f74'
access_secret <- 'jaqKjy4O6O73rYzOxMSAlbqigZu4iaEClAestfrRBjBZo'
access_token <- ' 1240280636-lHi3fdKVZGNE6FsUlvY7y13RsqED0JQgmKY9f74'
access_secret <- 'jaqKjy4O6O73rYzOxMSAlbqigZu4iaEClAestfrRBjBZo'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
warnings
warnings()
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
warnings()
View(twitter_token)
names(tweetSrc)
my_oauth <- OAuthFactory$new(consumerKey=consumer_key,consumerSecret=consumer_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
Sys.unsetenv(http_proxy="http://username:pass@proxy:port")
Sys.unsetenv(https_proxy="http://username:pass@proxy:port")
Sys.unsetenv(https_proxy)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
Sys.unsetenv()
Sys.env()
Sys.getenv()
Sys.unsetenv("http_proxy")
Sys.unsetenv("https_proxy")
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
my_oauth <- OAuthFactory$new(consumerKey=consumer_key,consumerSecret=consumer_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "my_oauth.Rdata")
content(req)
recentTweetsDS2 <- map(unlistedBots[], ~searchTwitteR(.x, resultType = "recent", n=200))
my_oauth <- OAuthFactory$new(consumerKey=consumer_key,consumerSecret=consumer_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "my_oauth.Rdata")
recentTweetsDS2 <- map(unlistedBots[], ~searchTwitteR(.x, resultType = "recent", n=200))
library(streamR)
recentTweetsDS2 <- map(unlistedBots[], ~searchTwitteR(.x, resultType = "recent", n=200))
?streamR
sampleStream( file.name="tweets_sample.json", oauth=my_oauth )
?searchTwitteR
searchTwitter('from:hadleywickham', resultType="recent", n=10)
library(twitteR)
searchTwitter('from:hadleywickham', resultType="recent", n=10)
install.packages(c("backports", "caret", "curl", "digest", "earth", "foreach", "hunspell", "iterators", "OpenMPController", "party", "plotrix", "proxy", "quantmod", "RcppArmadillo", "reshape2", "rpf", "testthat", "tm", "yaml"))
searchTwitter('from:hadleywickham', resultType="recent", n=10)
searchTwitteR('from:hadleywickham', resultType="recent", n=10)
searchTwitter('world cup+brazil', resultType="popular", n=15)
tweets = searchTwitter("#scala")
warning()
warnings()
tweets = searchTwitter("#scala")
warnings()
woeid = availableTrendLocations[1, "woeid"]
t1 <- getTrends(woeid)
woeid = availableTrendLocations[1, "woeid"]
availableTrendLocations[1, "woeid"]
?availableTrendLocations
closestTrendLocations()
closestTrendLocations(47)
?closestTrendLocations
closestTrendLocations(47,47)
library(rtweet)
??rtweet
rt <- search_tweets(
"#rstats", n = 18000, include_rts = FALSE
)
head(rt)
users_data(rt)
names(rt)
ts_plot(rt)
ts_plot(rt, "3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #rstats Twitter statuses from past 9 days",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
lastTweet <- get_timelines
lastTweet <- get_timelines(botAcctlist, n=1)
str(botAcctlist)
lastTweet <- get_timelines(botAcctlist$name, n=1)
lastTweet <- get_timelines(botAcctlist$screenName, n=1)
View(lastTweet)
rm(lastTweet)
lastTweet <- get_timelines(botAcctlist$screenName, n=1)
botAcctlist$screenName
botAcctlist %>%
map(screenName, get_timelines(.x, n = 1))
lastTweet <- get_timelines(botAcctlist$screenName[], n=1)
get_timelines("zjeeeey", n=1)
get_followers("zjeeeey", n=1)
cnn_flw <- get_followers("cnn", n = 75000)
stream_tweets(
"realdonaldtrump,trump",
timeout = 60 * 60 * 24 * 7,
file_name = "tweetsabouttrump.json",
parse = FALSE
)
djt <- parse_stream("tweetsabouttrump.json")
View(djt)
rm(content)
rm(conjja)
str(rt)
class(rt)
glimpse(rt)
names(rt)
View(rt)
tmls <- get_timelines(c("cnn", "BBCWorld", "foxnews"), n = 3200)
library(rtweet)
tmls <- get_timelines(c("cnn", "BBCWorld", "foxnews"), n = 3200)
head(botAcctlist)
tmls <- get_timelines(unlistedBots[], n = 1)
View(tmls)
rm(tmls)
tmls <- get_timelines(unlistedBots[], n = 1)
tmls <- get_timelines(c("cnn", "BBCWorld", "foxnews"), n = 3200)
cnn_flw <- get_followers(
"cnn", n = cnn$followers_count, retryonratelimit = TRUE
)
cnn_flw <- get_followers(
"cnn", n = cnn$followers_count, retryonratelimit = TRUE
)
cnn <- lookup_users("cnn")
tmls <- get_timelines(unlistedBots[], n = 1, retryonratelimit = TRUE)
warnings()
usersBots <- botAcctlist$screenName
users <- c("KimKardashian", "justinbieber", "taylorswift13",
"espn", "JoelEmbiid", "cstonehoops", "KUHoops",
"upshotnyt", "fivethirtyeight", "hadleywickham",
"cnn", "foxnews", "msnbc", "maddow", "seanhannity",
"potus", "epa", "hillaryclinton", "realdonaldtrump",
"natesilver538", "ezraklein", "annecoulter")
class(users)
class(usersBots)
tweetrStat <- lookup_users(usersBots)
str(tweetrStat)
View(tweetrStat)
tmls <-get_timelines(usersBots, n=1)
warnings()
tmls <- get_timelines("cnn", "fox", "msnbc"), n = 1, retryonratelimit = TRUE)
tmls <- get_timelines(c("cnn", "fox", "msnbc"), n = 1, retryonratelimit = TRUE)
tmls <- get_timelines(c("cnn", "foxnews", "BBCWorld", "msnbc"), n = 1, retryonratelimit = TRUE)
stream_tweets(
"GOPTaxScam",
timeout = 60 * 3,
file_name = "tweetsabtGTS.json",
parse = FALSE
)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(XML)
path_to_python <- "/usr/local/bin/python3.6"
use_python(path_to_python)
dbot=import("debot")
#path_to_python <- "/usr/local/bin/python3.6"
path_to_python <- "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6"
use_python(path_to_python)
dbot=import("debot")
db = dbot$DeBot('YocR3mKAc7U6hjKZrNnOCk2jjnWrqgSfwWYo8yOb')#This is my API key
dbot=import("debot")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(XML)
#path_to_python <- "/usr/local/bin/python3.6"
path_to_python <- "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6"
use_python(path_to_python)
dbot=import("debot")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(XML)
#path_to_python <- "/usr/local/bin/python3.6"
path_to_python <- "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6"
use_python(path_to_python)
dbot=import("debot")
py_config()
Sys.getenv("PATH")
Sys.setenv(PATH=paste("/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6",
Sys.getenv("PATH"), sep=":"))
py_config()
Sys.setenv(PATH = paste("/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6", Sys.getenv("PATH"), sep=":"))
py_config()
?py_config
?reticulate
?`reticulate-package`
use_python("/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6")
py_config()
use_python("/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6", required = TRUE)
dbot=import("debot")
py_config()
Sys.getenv("PATH")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(XML)
#path_to_python <- "/usr/local/bin/python3.6"
path_to_python <- "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6"
use_python(path_to_python)
py_config()
dbot=import("debot")
path_to_python <- "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6"
use_python(path_to_python)
py_available()
py_discover_config()
dbot=import("debot")
db = dbot$DeBot('YocR3mKAc7U6hjKZrNnOCk2jjnWrqgSfwWYo8yOb')#This is my API key
use_python(path_to_python)
dbot=import("debot")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
#path_to_python <- "/usr/local/bin/python3.6"
path_to_python <- "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6"
use_python(path_to_python)
dbot=import("debot")
db = dbot$DeBot('YocR3mKAc7U6hjKZrNnOCk2jjnWrqgSfwWYo8yOb')#This is my API key
gbots=htmlParse(db$get_related_bots('GOPTaxScam'))
library(XML)
gbots=htmlParse(db$get_related_bots('GOPTaxScam'))
bots2=htmlParse(db$get_related_bots('GOPTaxScam'))#Change 'election2016' to any other topic of your interest
cbots=htmlParse(db$get_related_bots('Charlottesville'))
db = dbot$DeBot('YocR3mKAc7U6hjKZrNnOCk2jjnWrqgSfwWYo8yOb')#This is my API key
View(db)
View(dbot)
db.get_related_bots('election2016'
)
db.get_related_bots('election2016')
dbot=import("debot")
db = dbot$DeBot('YocR3mKAc7U6hjKZrNnOCk2jjnWrqgSfwWYo8yOb')#This is my API key
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(XML)
#path_to_python <- "/usr/local/bin/python3.6"
path_to_python <- "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6"
use_python(path_to_python)
dbot=import("debot")
db = dbot$DeBot('YocR3mKAc7U6hjKZrNnOCk2jjnWrqgSfwWYo8yOb')#This is my API key
gbots=htmlParse(db$get_related_bots('GOPTaxScam'))
db.get_related_bots('election2016')
db
db.get_related_bots('election2016')
sessionInfo()
py_config()
tmls <-get_timelines(usersBots, n=1, retryonratelimit = TRUE)
library(rtweet)
tmls <-get_timelines(usersBots, n=1, retryonratelimit = TRUE)
userbots <- botAcctlist$screenName
tmls <-get_timelines(usersBots, n=1, retryonratelimit = TRUE)
userBots <- botAcctlist$screenName
tmls <-get_timelines(usersBots, n=1, retryonratelimit = TRUE)
usersBots <- botAcctlist$screenName
tmls <-get_timelines(usersBots, n=1, retryonratelimit = TRUE)
warnings()
#bots=htmlParse(db$get_related_bots('election2016'))#Change 'election2016' to any other topic of your interest
#cbots=htmlParse(db$get_related_bots('Charlottesville'))
gbots=htmlParse(db$get_related_bots('NetNeutrality'))
rm(gbots)
gbots=htmlParse(db$get_related_bots('netneutrality'))
rm(gbots)
GTS <- search_tweets(
"#GOPTaxScam", n = 18000, include_rts = FALSE
)
GTS <- search_tweets(
"#GOPTaxScam", n = 18000, include_rts = FALSE
)
summary(GTS)
str(GTS)
CTV <- search_tweets(
"#Charlottesville", n = 18000, include_rts = FALSE
)
ts_plot(CTV)
botAcctlist$screenName[1:10]
tmls <- get_timelines(botAcctlist$screenName[1:10], n = 2)
tmls
tmls <- get_timelines(botAcctlist$screenName[1:100], n = 1)
head(tmls)
rm(tmls)
tmls <- get_timelines(botAcctlist$screenName[1:100], n = 1)
head(tmls)
warnings()
time()
head(tmls)
tmls <- get_timelines(botAcctlist$screenName[1:100], n = 1)
warnings()
head(tmls)
GTS
gts <- parse_stream("tweetsabtGTS.json")
head(gts)
#bots=htmlParse(db$get_related_bots('election2016'))#Change 'election2016' to any other topic of your interest
cbots=htmlParse(db$get_related_bots('Charlottesville'))
rm(cbots)
rm(userBots)
rm(userbots)
rt <- stream_tweets("")
str(rt)
stream_tweets(
"netneutrality,openmtgfcc",
timeout = 60 * 60,
file_name = "tweetsabtNN.json",
parse = FALSE
)
netNeutral <- parse_stream("tweetsabtNN.json")
View(netNeutral)
users_data(netNeutral)
ts_plot(netNeutral)
tmls <- get_timelines(botAcctlist$screenName[1:100], n = 1)
tmls
warnings()
tmls <- get_timelines(netNeutral$screen_name, n = 1)
#bots=htmlParse(db$get_related_bots('election2016'))#Change 'election2016' to any other topic of your interest
#cbots=htmlParse(db$get_related_bots('Charlottesville'))
gbots=htmlParse(db$get_related_bots('NetNeutrality'))
rm(gbots)
tmls <- get_timelines(netNeutral$screen_name, n = 1)
netNeutral$text
tmls <- get_timelines(netNeutral$screen_name, n = 2)
tmls
warnings()
tmls <- get_timelines(botAcctlist$screenName[1:100], n = 2)
warnings()
tmls <- get_timelines(botAcctlist$screenName, n = 2)
warnings()
jkr <- get_favorites("jk_rowling", n = 3000)
sessionInfo()
jkr <- get_favorites("jk_rowling", n = 3000)
usrs <- search_users("#rstats", n = 1000)
usrs
sessionInfo()
library(twitteR)
result <- searchTwitter("Michigan", 10)
retach(twitteR)
detach(twitteR)
detach("twitteR")
detach("package:twitteR", unload=TRUE)
jkr <- get_favorites("jk_rowling", n = 3000)
usrs
str(usrs)
jkr <- get_favorites("jk_rowling", n = 3000)
tmls <- get_timelines(c("cnn", "BBCWorld", "foxnews"), n = 3200)
sessionInfo()
library(httr)
View(botAcctlist)
lastTweet <- GET https://api.twitter.com/1.1/statuses/show.json?id=botAcctlist$id
lastTweet <- GET(https://api.twitter.com/1.1/statuses/show.json?id=botAcctlist$id)
?GET
lastTweet <- GET("https://api.twitter.com/1.1/statuses/show.json?id=botAcctlist$id")
View(lastTweet)
lastTweet <- botAcctlist %>%
GET("GET https://api.twitter.com/1.1/statuses/show.json?id=id")
GET("https://api.twitter.com/1.1/statuses/show.json?id=id")
View(lastTweet)
parse_url(lastTweet$content)
??httr
rm(lastTweet)
lastTweet <- data.frame()
lastTweet$screenName <- botAcctlist$screenName
lastTweet
rm(lastTweet)
lastTweet$screenName <- botAcctlist$screenName
lastTweet$screenName <- data.frame(botAcctlist$screenName)
View(tmls)
tmlns <- get_timelines(botAcctlist$screenName, n = 5)
warnings()
rm(tmls)
GET("https://api.twitter.com/1.1/statuses/show.json?id=1973517494")
View(twitter_token)
rm(djt)
rm(db)
rm(dbot)
View(gts)
str(tweeters)
tweet <- GET("https://api.twitter.com/1.1/statuses/show.json?id=1973517494")
content(tweet)
tweet <- GET("https://api.twitter.com/1.1/statuses/show.json?id=729571835512164352")
content(tweet)
tweet <- GET("https://api.twitter.com/1.1/statuses/show/210462857140252672.json")
content(tweet)
View(myapp)
myapp
oauth_endpoints("twitter")
myapp <- oauth_app("twitter",
key = "OHIL9V7v7LikVwie2Vc3ltRxz",
secret = "IMqsEB0p1H7JeBZ5qGMXZUjqhppwbLi2SZxCQFVga8c4TNCRu7")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
oauth_endpoints("twitter")
myapp <- oauth_app("twitter",
key = "OHIL9V7v7LikVwie2Vc3ltRxz",
secret = "IMqsEB0p1H7JeBZ5qGMXZUjqhppwbLi2SZxCQFVga8c4TNCRu7")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
tweet <- GET("https://api.twitter.com/1.1/statuses/show/210462857140252672.json")
content(tweet)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumer_key <- 'qkgJvUbFX70rNn1K4uq9NAuVs'
consumer_secret <- 'xOGEeIMUUTrCTkVwGXXwdu75kqVzEq2yzDJuZPrBwt9NfwwFJm'
access_token <- ' 1240280636-lHi3fdKVZGNE6FsUlvY7y13RsqED0JQgmKY9f74'
access_secret <- 'jaqKjy4O6O73rYzOxMSAlbqigZu4iaEClAestfrRBjBZo'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
sessionInfo()
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumer_key <- 'qkgJvUbFX70rNn1K4uq9NAuVs'
consumer_secret <- 'xOGEeIMUUTrCTkVwGXXwdu75kqVzEq2yzDJuZPrBwt9NfwwFJm'
access_token <- ' 1240280636-lHi3fdKVZGNE6FsUlvY7y13RsqED0JQgmKY9f74'
access_secret <- 'jaqKjy4O6O73rYzOxMSAlbqigZu4iaEClAestfrRBjBZo'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
tweet <- GET("https://api.twitter.com/1.1/statuses/show/210462857140252672.json")
content(tweet)
content(req)
View(req)
req[["content"]]
content(req)
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
twitter_token <- oauth2.0_token(oauth_endpoints("twitter"), myapp)
refresh()
rm(conjja)
head(CTV)
head(CTV$text)
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
ts_plot(CTV)
saveRDS(CTV)
saveRDS(CTV, "capstone dataset/CTV")
str(CTV)
glimpse(CTV)
library(tidyverse)
glimpse(CTV)
sessionInfo()
rm(gts)
rm(GTS)
rm(netNeutral)
str(rt)
rm(rt)
?part
?pairs
names(shredDF)
head(tweetSrc)
names(shredDF)
head(shredDF)
head(appcount)
library(rpart)
?pnorm
