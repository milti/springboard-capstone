group_by(screenName) %>%
filter(screenName %in% botDS$screenName)
identical(selectedTweetsDF, newDF)
groupedTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
filter(screenName %in% botDS$screenName)
saveRDS(groupedTweetsDF, "groupedTweetsDF")
remove(selectedTweetsDF)
remove(newDF)
length(unique(groupedTweetsDF))
length(unique(groupedTweetsDF$screenName))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
filter(screenName !%in% botDS$screenName)
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
!filter(screenName !%in% botDS$screenName)
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
!(filter(screenName !%in% botDS$screenName))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
!(filter(screenName %in% botDS$screenName))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
setdiff(filter(screenName %in% botDS$screenName))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
subset(!(filter(screenName %in% botDS$screenName)))
distaffTweetsDF <- tweetsOPEN %>%
group_by(screenName) %>%
!(filter(screenName %in% botDS$screenName))
distaffTweetsDF <- tweetsOPEN %>%
castoffDF <- setdiff(tweetsOPEN, groupedTweetsDF)
?setdiff
castoffDF <- setdiff(tweetsOPEN, groupedTweetsDF)
saveRDS(castoffTweetsDF, "castoffTweetsDF")
saveRDS(castoffDF, "castoffDF")
groupedTweetsDF %>%
unlist(paste(screenNme$text, collapse = "!"))
groupedTweetsDF %>%
unlist(paste(screenName$text, collapse = "!"))
groupedTweetsDF %>%
unlist(paste(group_by(screenName)$text, collapse = "!"))
groupedTweetsDF %>%
group_by(screenName)
groupedTweetsDF %>%
group_by(screenName) %>%
unlist(paste(text()))
groupedTweetsDF %>%
group_by(screenName) %>%
unlist(paste(text)
)
groupedTweetsDF %>%
group_by(screenName) %>%
name <- screenName[]
groupedTweetsDF %>%
for name in unique(screenName) {}
groupedTweetsDF %>%
for name in unique(screenName) { paste(filter(tweetsOPEN, screenName == name)$text)}
for name in unique(tweetsOPEN$screenName) { paste(filter(tweetsOPEN, screenName == name)$test)}
for (name in unique(tweetsOPEN$screenName)) { paste(filter(tweetsOPEN, screenName == name)$test)}
traceback()
botDS$langDiv <- map(tweetsOPEN$screenName[], ~paste(filter(tweetsOPEN, screenName == .x)$text))
sessionInfo()
library(tidyverse)
botDS$langDiv <- map(tweetsOPEN$screenName[], ~paste(filter(tweetsOPEN, screenName == .x)$text))
botDS$langDiv
library(quanteda)
library(koRpus)
names(botDS)
tweetsOPEN %>%
for (name in screenName[]) { print(screenName)}
for (name in unique(tweetsOPEN$screenName) { print(name)})
for(name in unique(tweetsOPEN$screenName) { print(name)})
length(unique(groupedTweetsDF$screenName))
View(botDS)
groupedTweetsDF %>%
groupedTweetsDF %>%
groupedTweetsDF$langDiv <- textstat_lexdiv(groupedTweetsDF$text)
groupedTweetsDF$langDiv <- textstat_lexdiv(dfm(groupedTweetsDF$text))
View(botDS)
View(groupedTweetsDF)
traceback()
names(groupedTweetsDF)
groupedTweetsDF$langDiv
langDiv <- textstat_lexdiv(dfm(groupedTweetsDF$text))
str(langDiv)
groupedTweetsDF$langDiv <- langDiv$TTR
View(groupedTweetsDF)
botDiv <- groupedTweetsDF %>%
group_by(screenName)
botDiv <- groupedTweetsDF %>%
group_by(screenName) %>%
summarise(meanDiv = mean(langDiv))
str(botDiv)
View(botDiv)
left_join(botDS, botDiv)
View(botDS)
botDS <- left_join(botDS, botDiv)
View(botDS)
str(s)
str(newBotlist)
View(groupedTweetsDF)
View(newBotlist)
as.numeric(as.POSIXct(botDS$acct_created[1]))
load("capstone dataset/Objets")
str(twitter)
remove(twitter)
saveRDS(botDS, "botDS")
saveRDS(groupedTweetsDF, "groupedTweetsDF")
remove(acctNames)
remove(acctRT)
remove(bots)
remove(name)
remove(path_to_python)
remove(unlistedBots)
remove(db)
remove(dbot)
remove(flat'')
remove(flatbot)
remove(flatterbot)
saveRDS(langDiv, "langDiv")
langDiv
savehistory("~/R/github/springboard capstone/20171031.Rhistory")
View(newBotlist)
newBotlist[[1]]
REMOVE(newBotlist)
remove(newBotlist)
tweeters[]
tweeters[[1]]
names(botDF)
names(botOPEN)
remove(botOPEN)
remove(botRT)
saveRDS(botDiv, "botDiv")
install.packages(c("data.table", "gapminder", "glue", "lazyeval", "lubridate", "proxy", "pryr", "robustbase", "withr"))
library(tidyverse)
library(twitteR)
library(httr)
library(tidyverse)
remove(tweetsOPEN)
remove(tweetsRT)
library(tidyverse)
library(httr)
library(quanteda)
library(koRpus)
sessionInfo()
install.packages(c("mgcv", "sparklyr"))
library((tidyverse))
library(tidyverse)
library(httr)
library(quanteda)
library(koRpus)
ls()
labgDiv
langDiv
View(langDiv)
View(botDS)
botDS$langDiv <- botDS$meanDiv
View(botDS)
sessionInfo()
??koRpu
`koRpus-package`
librarr(tm)
library(tm)
tagged.text <- treetag("~/docs/sample_text.txt", treetagger="manual",
lang="en", TT.options=c(path="~/bin/treetagger/", preset="en"))
tagged.text <- treetag("~/docs/sample.txt", treetagger="manual",
lang="en", TT.options=c(path="~/bin/treetagger/", preset="en"))
traceback()
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="~/bin/treetagger/", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en")
tagged.text <- treetag("./sample.txt", lang="en")
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Users/milti/Downloads/tree-tagger-MacOSX-3.2/bin", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Users/milti/Downloads/tree-tagger-MacOSX-3.2/bin/tree-tagger", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/tree-tagger/bin", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/bin", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/", preset="en"))
traceback()
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/models/en.par", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/", preset="en"))
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/"))
tagged.text <- tokenize("./sample.txt", lang="en")
str(tagged.text)
View(tagged.text)
taggedText(tagged.text)
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/", preset="en"), debug = TRUE)
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/", preset="en"), debug = TRUE)
tagged.text <- treetag("./sample.txt", treetagger="manual",
lang="en", TT.options=c(path="/Applications/treetagger/"))
tagged.text <- treetag("./sample.txt", lang="en", TT.options=c(path="/Applications/treetagger/"))
?set.kRp.env
set.kRp.env(TT.cmd="/Applications/treetagger/cmd/tree-tagger/english", lang="en")
library(koRpus)
set.kRp.env(TT.cmd="/Applications/treetagger/cmd/tree-tagger/english", lang="en")
set.kRp.env(TT.cmd="/Applications/treetagger/cmd/tree-tagger/english", lang="en")
get.kRp.env(TT.cmd=TRUE)
set.kRp.env(TT.cmd="/Applications/treetagger/cmd/tree-tagger-english", lang="en")
tagged.text <- treetag("./sample.txt")
tagged.text <- treetag("./sample.txt", debug = TRUE)
str(describe(tagged.text))
describe(tagged.text)[["lttr.distrib"]]
descr.tagged.text <- describe(tagged.text)[["lttr.distrib"]]
View(descr.tagged.text)
lex.div(tagged.text)
lex.div(measure="validation")
kpDiv <- treetag((groupedTweetsDF$text, debug = TRUE)
kpDiv <- treetag(groupedTweetsDF$text, debug = TRUE)
kpDiv <- treetag(dfm(groupedTweetsDF$text, debug = TRUE))
groupedTweetsDF %>%
groupb_by(screenName)
groupedTweetsDF %>%
groupb_by(screenName) %>%
tweet$text <- paste(text)
groupedTweetsDF %>%
groupb_by(screenName) %>%
groupedTweetsDF %>%
group_by(screenName) %>%
tweet$text <- paste(text)
groupedTweetsDF %>%
group_by(screenName) %>%
unlist(tweet$text <- paste(text))
groupedTweetsDF %>%
group_by(screenName) %>%
tweet$text <- unlist(paste(text))
groupedTweetsDF %>%
down vote
Proof next steps:
txt1 <- treetag(c(“played”, “saw”),
treetagger=”manual”, lang=”en”,
encoding = “UTF-8″,
TT.options=list(path=”C:/TreeTagger”, preset=”en”),
format = “obj”)
txt1 <- treetag(c(“played”, “saw”),
treetagger=”manual”, lang=”en”,
encoding = “UTF-8″,
TT.options=list(path=”C:/TreeTagger”, preset=”en”),
format = “obj”)
txt1 <- treetag(c("played", "saw"),
treetagger="manual", lang="en",
encoding = "UTF-8",
TT.options=list(path="C:/TreeTagger", preset="en"),
format = "obj")
txt1 <- treetag(c("played", "saw"),
treetagger="manual", lang="en",
encoding = "UTF-8",
TT.options=list(path="/Applications/treetagger", preset="en"),
format = "obj")
txt1 <- treetag(c("played", "saw"),
treetagger="manual", lang="en",
encoding = "UTF-8",
TT.options=list(path="/Applications/treetagger/lib", preset="en"),
format = "obj")
install.packages("tm.plugin.koRpus", repo="https://reaktanz.de/R")
class(groupedTweetsDF$text)
txt1 <- treetag(c("played", "saw"),
treetagger="manual", lang="en",
encoding = "UTF-8",
TT.options=list(path="/Applications/treetagger", preset="en"),
format = "obj")
txt1 <- treetag(c("played", "saw"),
treetagger="manual", lang="en",
encoding = "UTF-8",
format = "obj")
txt1 <- treetag(c("played", "saw"),
encoding = "UTF-8",
format = "obj")
kpDiv <- treetag(dfm(groupedTweetsDF$text[1], debug = TRUE))
kpDiv <- treetag(groupedTweetsDF$text[1], debug = TRUE)
groupedTweets$text[1]
groupedTweetsDF$text[1]
?treetag
kpDiv <- treetag(groupedTweetsDF$text[1], debug = TRUE, format = "obj")
kpDiv <- treetag(groupedTweetsDF$text[6435], debug = TRUE, format = "obj")
kpDiv <- treetag(list(groupedTweetsDF$text[6435]), debug = TRUE, format = "obj")
list(groupedTweetsDF$text[6435])
kpDiv <- treetag(list(groupedTweetsDF$text[[6435]]), debug = TRUE, format = "obj")
list(groupedTweetsDF$text[[6435]])
kpDiv <- treetag(as.vector(groupedTweetsDF$text[6435]), debug = TRUE, format = "obj")
groupedTweetsDF$text[[1]]
groupedTweetsDF$text[1]
View(botDiv)
recentTweetsDF <- readRDS("capstone dataset/recentTweetsDF")
recentTweetsDF[1]
recentTweetsDF[,1]
recentTweetsDF[[],1]]
recentTweetsDF[[,1]]
rownames(recentTwetstDF)
rownames(recentTweetsDF)
recentTweetsDF[,989]
recentTweetsDF[989]
recentTweetsDF[989,]
$filter
?filter
?select
??select
select(recentTweetsDF, contains("Android"))
recentTweetsDF %>%
select(statusSource, contains("Android"))
library(tidyverse)
recentTweetsDF %>%
select(statusSource, contains("Android"))
recentTweetsDF %>%
select(statusSource, !contains("Android"))
recentTweetsDF %>%
select(statusSource, contains("Web"))
?which
recentTweetsDF$statusSource["Android"]
ls.str()
rm(castoffDF)
ls.str()
str(recentTweetsDF$text)
str(as.character(recentTweetsDF$text))
library(stringr)
?ls.str
recentTweetsDF$statusSource[str_detect("Android")]
?str_detect
str_detect(recentTweetsDF$statusSource, "Android")
which(str_detect(recentTweetsDF$statusSource, "Android"))
which(str_detect(recentTweetsDF$statusSource, "Twitter"))
recentTweetsDF$statusSource[1]
which(str_detect(recentTweetsDF$statusSource, "Web"))
webTweetsDF <- which(str_detect(recentTweetsDF$statusSource, "Web"))
recentTweetsDF %>%
which(str_detect(statusSource, "Web"))
webTweetsDF <- indices(str_detect(recentTweetsDF$statusSource, "Web"))
rm(webTweetsDF)
inD <- indices(str_detect(recentTweetsDF$statusSource, "Web"))
webTweetsDF <- recentTweetsDF$statusSource[inD]
inD
inD <- which(str_detect(recentTweetsDF$statusSource, "Web"))
webTweetsDF <- recentTweetsDF$statusSource[inD]
webTweetsDF <- recentTweetsDF %>%
recentTweetsDF$statusSource[inD]
inD
webTweetsDF <- recentTweetsDF %>%
recentTweetsDF[inD,]
recentTweetsDF$statusSource[inD]
recentTweetsDF[inD]
recentTweetsDF[,inD]
recentTweetsDF[inD,]
webTweetsDF <- recentTweetsDF[inD,]
View(webTweetsDF)
inD <- which(str_detect(recentTweetsDF$statusSource, "Android"))
androidTweetsDF <- recentTweetsDF[inD,]
inD <- which(str_detect(recentTweetsDF$statusSource, "Iphone"))
iTweetsDF <- recentTweetsDF[inD,]
inD
recentTweetsDF$statusSource
inD <- which(str_detect(recentTweetsDF$statusSource, "iPhone"))
iTweetsDF <- recentTweetsDF[inD,]
inD <- which(str_detect(recentTweetsDF$statusSource, !c("Android", "Web", iPhone"))
inD <- which(str_detect(recentTweetsDF$statusSource, !c("Android", "Web", iPhone")))
inD <- which(str_detect(recentTweetsDF$statusSource, c("Android", "Web", iPhone")))
inD <- which(!str_detect(recentTweetsDF$statusSource, c("Android", "Web", iPhone")))
inD <- which(str_detect(recentTweetsDF$statusSource, !c("Android", "Web", "iPhone")))
inD <- which(!str_detect(recentTweetsDF$statusSource, c("Android", "Web", "iPhone")))
inD <- which(str_detect(recentTweetsDF$statusSource, c("Android", "Web", "iPhone")))
inD <- which(str_detect(recentTweetsDF$statusSource, ("Android", "Web", "iPhone")))
inD <- which(str_detect(recentTweetsDF$statusSource, c("Android", "Web", "iPhone")))
lex <- c("Android", "iPhone", "Web")
inD <- which(str_detect(recentTweetsDF$statusSource, lex))
inD <- which(str_detect(recentTweetsDF$statusSource, "lex"))
lex
inD <- which(str_detect(recentTweetsDF$statusSource, lex))
inD <- which(str_detect(recentTweetsDF$statusSource, !lex))
inD <- which(str_detect(recentTweetsDF$statusSource, !(lex))
inD <- which(str_detect(recentTweetsDF$statusSource, !(lex)))
str_detect(recentTweetsDF$statusSource, !(lex))
str_detect(recentTweetsDF$statusSource, lex)
str_detect(recentTweetsDF$statusSource, !lex)
is.false(str_detect(recentTweetsDF$statusSource, lex))
inD <- which(str_detect(recentTweetsDF$statusSource, lex))
lex
remove(lex)
myList <- c("Android", "iPhone", "Web")
inD <- which(str_detect(recentTweetsDF$statusSource, myList))
str_detect(recentTweetsDF$statusSource, myList)
head(recentTweetsDF$statusSource)
oldWarning <- getOption("warn")
oldWarning
options(warn = -1)
str_detect(recentTweetsDF$statusSource, myList)
inD <- which(str_detect(recentTweetsDF$statusSource, myList))
inD <- str_detect(recentTweetsDF$statusSource, myList)
inD <- which(str_detect(recentTweetsDF$statusSource, myList))
head(recentTweetsDF$statusSource)
inD <- str_detect(recentTweetsDF$statusSource, paste(c("Android", "iPhone", "Web"), collapse = '|'))
inD <- which(str_detect(recentTweetsDF$statusSource, paste(c("Android", "iPhone", "Web"), collapse = '|')))
otherTweetsDF <- recentTweetsDF[!inD,]
inD
otherTweetsDF <- recentTweetsDF[!(inD),]
otherTweetsDF <- recentTweetsDF[-inD,]
remove(recentTweetsDF)
otherTweetsDF$statusSource
recentTweetsDF <- readRDS("capstone dataset/recentTweetsDF")
inD <- which(str_detect(recentTweetsDF$statusSource, "iP"))
iTweetsDF <- recentTweetsDF[inD,]
inD <- which(str_detect(recentTweetsDF$statusSource, paste(c("Android", "iP", "Web"), collapse = '|')))
otherTweetsDF <- recentTweetsDF[-inD,]
unique(recentTweetsDF$statusSource)
uniqSource <- unique(recentTweetsDF$statusSource)
remove(recentTweetsDF)
ls.str()
save.image("~/R/github/springboard capstone/20170311.RData")
kpDiv <- treetag(list(groupedTweetsDF$text[6435]), debug = TRUE, format = "obj")
View(otherTweetsDF)
names(otherTweetsDF)
recentTweetsDF <- readRDS("capstone dataset/recentTweetsDF")
x <- recentTweetsDF$statusSource
x2 <- gsub("\<(.*?)\>/", "", x)
x2 <- gsub("\\<(.*?)\\>/", "", x)
head(x2)
identical(x, x2)
head(x)
x2 <- gsub("\\<(.*?)\\>", "", x)
head(x2)
x2 <- gsub("\<(.*?)\>/", "", x)
x2 <- gsub("\\<(.*?)\\>/", "", x)
head(x2)
x2 <- gsub("\\<(.*?)\\>/", "", x2)
head(x2)
kpDiv <- treetag(list(groupedTweetsDF$text[6435]), debug = TRUE, format = "obj")
tagged.text <- treetag("./sample.txt", lang="en", TT.options=c(path="/Applications/treetagger/"))
tagged.text <- treetag("./sample.txt"))
tagged.text
knitr::opts_chunk$set(echo = TRUE)
#using koRpus package
set.kRp.env(TT.cmd="/Applications/treetagger/cmd/tree-tagger-english", lang="en")
rm(recentTweetsDF)
lex.div(tagged.text)
lex.div(measure="validation")
kpDiv <- treetag(groupedTweetsDF$text[6435], debug = TRUE, format = "obj")
saveRDS(androidTweetsDF, "capstone dataset/androidTweetsDF")
saveRDS(iTweetsDF, "capstone dataset/iTweetsDF")
saveRDS(otherTweetsDF, "capstone dataset/otherTweetsDF")
saveRDS(webTweetsDF, "capstone dataset/webTweetsDF")
rm(androidTweetsDF)
rm(iTweetsDF)
rm(otherTweetsDF)
rm(webTweetsDF)
install.packages(c("devtools", "gapminder", "glue", "irlba", "lazyeval", "lubridate", "openNLPdata", "openssl", "purrr", "quanteda", "R.utils", "rlang", "subprocess", "tidyselect", "tidyverse", "withr"))
install.packages("mgcv")
install.packages(c("ggtern", "ggmap", "animation", "tidyselect", "geosphere", "gridBase", "gridExtra", "choroplethr", "sparklyr"))
install.packages(c("arules", "arulesViz", "ascii"))
install.packages(c("bookdown", "Cairo", "cairoDevice", "callr", "caret", "caretEnsemble", "caTools", "cellranger", "checkmate", "chron", "cognizer", "coin", "condvis", "corpcor", "corrplot", "Cubist", "data.world", "data.tree"))
install.packages(c("elasticnet", "elastic", "elasticsearchr", "fastICA", "foba", "formatR", "formattable", "gam", "gbm", "GGally", "ggalt", "ggdendro"))
install.packages(c("githubinstall", "gitgadget", "gplm", "gWidgets"))
install.packages(c("IRdisplay", "IRkernel", "ISLR", "ISwR", "jsonld", "jsonvalidate", "kernlab", "klaR"))
githubinstall::gh_install_packages("cairoDevice")
install.packages("RGtk2", type="source")
install.packages(c("leaflet", "leafletR", "leaps", "listviewer", "lmPerm", "microbenchmark", "minqa"))
install.packages(c("mlbench", "MLmetrics", "pamr", "party", "pbdZMQ", "plotmo", "pls"))
install.packages(c("prais", "praise", "pROC", "proxy", "pryr", "R.matlab", "randomForest", "RANN", "RANN.L1", "ratlle"))
install.packages(c("repurrrsive", "rgdal", "RGtk2", "RGtk2Extras", "RNeo4j", "rneos"))
install.packages(c("rpart.plot", "rpart.utils", "rPython", "shinyAce", "sm", "sna", "spls"))
install.packages("Rgtk2")
y
install.packages("RGtk2")
install.packages("RGtk2", depen=T, type="source")
install.packages(c("subselect", "superpc", "swirl", "swirlify", "switchr", "switchrGist", "testthat", "testthis"))
install.packages(c("vioplot", "violinmplot", "widyr"))
install.packages(c("RGtk2", "cairoDevice", "rattle", "rattle.data"))
install.packages(c("RGtk2", "rattle", "cairoDevice", "rattle.data"))
library(RGtk)
library(RGtk2)
sessionInfo()
install.packages(c(rattle", "cairoDevice", "rattle.data"))
install.packages(c("rattle", "cairoDevice", "rattle.data"))
library(cairoDevice)
install.packages(c("rattle", "rattle.data"))
install.packages(c("BradleyTerry2", "brglm", "brglm2", "caTools"))
install.packages("cognizer")
githubinstall::gh_update_package_list()
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("ColumbusCollaboratory/cognizer")
install.packages(c("earth", "ellipse"))
install.packages("IRkernel")
devtools::install_github("IRkernel")
devtools::install_github("IRkernel/IRkernel")
install.packages(c("mda", "mdatools"))
install.packages(c("pmml", "r4ds"))
devtools::install_github("hwickam/R4ds")
devtools::install_github("hadleywickam/R4ds")
devtools::install_github("hadlet/r4ds")
devtools::install_github("hadley/r4ds")
install.packages("RGtk2Extras")
install.packages("tm.plugin.koRpus")
devtools::install_github("tm.plugin.koRpus")
install.packages("tm.plugin.koRpus")
devtools::install_git("tm.plugin.koRpus")
devtools::install_github("unDocUMeantit/tm.plugin.koRpus")
