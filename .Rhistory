latestStat$`15_margiecastro`$getUrl
latestStat$`15_margiecastro`$url
str(latestStat)
summary(botDS)
names(botDS)
shredBotDS <- botDS[, -1]
rownames(shredBotDS) <- botDS[,1]
shredBotDS
rowname(shredBotDS) <- botDS[,1]
rownames(shredBotDS) <- botDS[,1]
rownames(shredBotDS)
rownames(shredBotDS) <- botDS[,1]
shredBotDS <- botDS[, -1]
rownames(shredBotDS) <- botDS[,1]
rm(shredBotDS)
names(shredDF)
names(botDS)
names(latestStat)
names(latestStatDF)
tempDS <- left_join(botDS, latestStatDF[.c("followersCount", "friendsCount", "listedCount")])
library(tidyverse)
tempDS <- left_join(botDS, latestStatDF[.c("followersCount", "friendsCount", "listedCount")])
tempDS <- left_join(botDS, latestStatDF[,c("followersCount", "friendsCount", "listedCount")])
tempDS <- left_join(botDS, latestStatDF[,c("followersCount", "friendsCount", "listedCount")], by = "screenName")
tempDS <- left_join(botDS, latestStatDF[,c("screenName", followersCount", "friendsCount", "listedCount")], by = "screenName")
tempDS <- left_join(botDS, latestStatDF[,c("screenName", "followersCount", "friendsCount", "listedCount")], by = "screenName")
names(tempDS)
glimpse(tempDS)
botDS <- left_join(botDS, latestStatDF[,c("screenName", "followersCount", "friendsCount", "listedCount")], by = "screenName")
summary(botDS)
names(latestStatDF)
botDS <- left_join(botDS, latestStatDF[,c("screenName", "url", "location")], by = "screenName")
summary.data.frame(botDS)
names(latestStatDF)
class(latestStatDF$url)
str(latestStatDF)
str(latestStatDF[11])
str(latestStat)
str(latestStat[1])
names(botDS)
botDS[,-18]
names(botDS[,-18])
botDS <- names(botDS[,-18])
names(botDS)
botDS <- left_join(botDS, latestStatDF[,c("screenName", "followersCount", "friendsCount", "location" "listedCount")], by = "screenName")
botDS <- left_join(botDS, latestStatDF[,c("screenName", "followersCount", "friendsCount", "location", "listedCount")], by = "screenName")
library(tidyverse)
botDS <- left_join(botDS, latestStatDF[,c("screenName", "followersCount", "friendsCount", "location", "listedCount")], by = "screenName")
View(botDS)
?saveRDS
saveRDS(botDS, "capstone data/botDS")
saveRDS(botDS, "capstone dataset/botDS")
names(botDS)
tempDS <- botDS[, c(1, 6, 16, 15, 17:18, 3, 13, 4, 12, 7, 5, 8:11)]
View(tempDS)
names(latestStatDF)
names(tempDS)
tempDS[, -5]
names(tempDS[, -5])
tempDS <- tempDS[, -5]
names(tempDS)
names(botDS)
tempDS <- botDS[, c(1, 6, 14, 16, 15, 18, 3, 13, 4, 12, 7, 5, 8:11)]
names(tempDS)
tempDS <- botDS[, c(1, 6, 14, 16, 15, 18, 3, 13, 4, 12, 7, 9, 5, 8, 10, 11)]
names(tempDS)
tempDS <- botDS[, c(1, 6, 14, 16, 15, 18, 3, 12, 13, 4, 7, 9, 5, 8, 10, 11)]
names(tempDS)
botDS.20180129 <- botDS
summary.data.frame(tempDS[,-1])
summary.data.frame(tempDS[,-1:2])
summary.data.frame(tempDS[,-1])
tempDS$App
unique(tempDS$App)
tempDS$App.BoN
knitr::opts_chunk$set(echo = TRUE)
botDS <- data.frame(botAcctlist$screenName, botAcctlist$id, botAcctlist$created, botAcctlist$statusesCount, langDiv = 0, mean_time_betwn_tweets = 0, bot = 0)
columnnames <- names(botDS)
columnnames[1] <- "screenName"
columnnames[2] <- "ID"
columnnames[3] <- "acct_created"
columnnames[4] <- "statusesCount"
colnames(botDS) <- columnnames
tweetsRT <- filter(recentTweetsDF, isRetweet == "TRUE")
botDS <- data.frame(botAcctlist$screenName, botAcctlist$id, botAcctlist$created, botAcctlist$statusesCount, langDiv = 0, mean_time_betwn_tweets = 0, bot = 0)
columnnames <- names(botDS)
columnnames[1] <- "screenName"
columnnames[2] <- "ID"
columnnames[3] <- "acct_created"
columnnames[4] <- "statusesCount"
colnames(botDS) <- columnnames
tweetsRT <- filter(recentTweetsDF, isRetweet == "TRUE")
install.packages("colorblindr")
install.packages(c("callr", "digest", "ggraph", "gutenbergr", "knitr", "mvtnorm", "quanteda", "reprex", "RGtk2", "subselect", "tidyr"))
install.packages(c("digest", "quanteda", "RGtk2"))
install.packages("digest")
install.packages("quanteda")
install.packages(c("digest", "quanteda", "RGtk2"))
install.packages("RGtk2", depen=T, type="source")
install.packages("quanteda", type = "source")
install.packages("digest")
devtools::install("eddelbuettel/digest")
?devtools::install_github
devtools::install("eddelbuettel/digest")
devtools::install("digest")
devtools::install_github("eddelbuettel/digest")
install.packages("RGtk2")
sessionInfo()
tempDS$acct_created
class(tempDS$acct_created)
cut(tempDS$acct_created, breaks = "month")
table(cut(tempDS$acct_created, breaks = "month"))
table(cut(tempDS$acct_created, breaks = "6 month"))
table(cut(tempDS$acct_created, breaks = "9 month"))
table(cut(tempDS$acct_created, breaks = "4 month"))
table(cut(tempDS$acct_created, breaks = "3 month"))
table(cut(tempDS$acct_created, breaks = "2 month"))
sessionInfo()
library(tidyverse)
table(cut(tempDS$acct_created, breaks = "2 month"))
install.packages(c("callr", "MASS", "mgcv", "RGtk2", "rpart"))
install.packages("RGtk2")
table(cut(tempDS$acct_created, breaks = "2 month"))
install.packages("colorblindr")
install.packages("colorblindr", type = "source")
botDS <- tempDS
knitr::opts_chunk$set(echo = TRUE)
#binning the account creation column
table(cut(botDS$acct_created, breaks = "6 month"))
knitr::opts_chunk$set(echo = TRUE)
saveRDS(botDS, "botDS")
install.packages("RGtk2")
install.packages("greta")
library (devtools)
install_github("goldingn/gpflowr")
install_github("greta-dev/greta")
install_github("greta-dev/greta.gp")
install.packages("greta")
GGally::ggpairs(botDS)
GGally::ggpairs(botDS[,-1])
table(cut(botDS$acct_created, breaks = "6 month"))
table(cut(botDS$acct_created, breaks = "3 month"))
table(cut(botDS$acct_created, breaks = "4 month"))
table(cut(botDS$acct_created, breaks = "10 month"))
table(cut(botDS$acct_created, breaks = "8 month"))
table(cut(botDS$acct_created, breaks = "9 month"))
table(cut(botDS$acct_created, breaks = "6 month"))
table(cut(botDS$acct_created, breaks = "3 month"))
table(cut(botDS$acct_created, breaks = "4 month"))
cut(botDS$acct_created, breaks = "4 month")
as.factor(cut(botDS$acct_created, breaks = "4 month"))
tempDS$acct_created <-  as.factor(cut(tempDS$acct_created, breaks = "4 month"))
GGally::ggpairs(tempDS[, -1])
tempDS$acct_created <-  as.factor(cut(tempDS$acct_created, breaks = "6 month"))
tempDS$acct_created <-  !as.factor(cut(tempDS$acct_created, breaks = "4 month"))
tempDS$acct_created <-  !as.factor(tempDS$acct_created)
tempDS <- botDS
tempDS$acct_created <-  as.factor(cut(tempDS$acct_created, breaks = "6 month"))
GGally::ggpairs(tempDS[, -1])
tempDS <- botDS
tempDS$acct_created <-  as.factor(cut(tempDS$acct_created, breaks = "8 month"))
GGally::ggpairs(tempDS[, -1])
tempDS <- botDS
tempDS$acct_created <-  as.factor(cut(tempDS$acct_created, breaks = "9 month"))
GGally::ggpairs(tempDS[, -1])
tempDS <- botDS
tempDS$acct_created <-  as.factor(cut(tempDS$acct_created, breaks = "6 month"))
GGally::ggpairs(tempDS[, -1])
tempDS <- botDS
tempDS$acct_created <-  as.factor(cut(tempDS$acct_created, breaks = "7 month"))
GGally::ggpairs(tempDS[, -1])
tempDS$App
unique(tempDS$App)
GGally::ggpairs(tempDS[, -1])
GGally::ggpairs(tempDS[, c(-1, -7, -13])
GGally::ggpairs(tempDS[, c(-1, -7, -13)])
GGally::ggpairs(tempDS[, -c(1, 7, 13)])
names(tempDS)
GGally::ggpairs(tempDS[, -c(1, 7, 14)])
newBotlist
newBotlist[[]]
newBotlist[]
glimpse(newBotlist)
library(tidyverse)
glimpse(newBotlist)
str(newBotlist)
head(str(newBotlist))
ls("capstone dataset")
acctNames <- row.names.data.frame(botAcctlist)
str(acctNames)
glimpse(acctNames)
class(acctNames)
str(botAccts)
str(botAcctlist)
botAccts
botAccts[][1]
botAccts[][]
botAccts[][[]]]
botAccts[[]][1]
botAccts[[]]
unlist(botAccts[])
unlist(botAccts[[]]])
unlist(botAccts[][1])
flatlist(botAccts[][1])
flatten(botAccts[][1])
flatten(botAccts[])
flatten(botAccts)
names(botAcctlist)
as.factor(cut(botDS$acct_created, breaks = "9 month"))
cut(botDS$acct_created, breaks = "9 month")
library(lubridate)
botDS$acct_created <- ymd_hms(botDS$ac)
botDS$acct_created <- ymd_hms(botDS$acct_created)
str(botDS$acct_created)
cut(botDS$acct_created, breaks = "9 month")
table(cut(botDS$acct_created, breaks = "9 month"))
table(cut(botDS$acct_created, breaks = "6 month"))
table(cut(botDS$acct_created, breaks = "4 month"))
botDS %>% filter(month(acct_created == 7) && year(acct_created == 2015)) %>% summarise(n())
botDS %>% filter(month(acct_created == "7") && year(acct_created == 2015)) %>% summarise(n())
botDS %>% filter(month(acct_created == "7") && year(acct_created == "2015")) %>% summarise(n())
class(botDS$acct_created)
botDS$Month <- month(botDS$acct_created)
botDS$Month <- month(botDS$acct_created, label = TRUE)
View(CTV)
names (CTV)
unique(CTV$screen_name)
x  <- unique(CTV$screen_name)
y <- unique(botDS$screenName)
setdiff(x,y)
z <- setdiff(x,y)
length(z)
length(y)
length(x)
botDS$bot <- 1
CTV$$bot <- 0
CTV$bot <- 0
options(scipen = 999)
View(botDS)
CTV.orig <- CTV
saveRDS(CTV.orig, "capstone dataset/CTV.orig")
CTV$acct_created <- ymd_hms(CTV$acct_created)
names(CTV)
??rtweet
library(rtweet)
x <- users_data(CTV)
x
names(x)
CTVstats <- x
rm(x)
rm(c(y,z))
rm(y)
rm(z)
saveRDS(CTVstats, "capstone dataset/CTVstats")
CTV$acct_created <- ymd_hms(CTVstats$account_created_at)
CTVstats$acct_created <- ymd_hms(CTVstats$account_created_at)
table(cut(CTVstats$acct_created, break = "6 months"))
table(cut(CTVstats$acct_created, breaks = "4 month"))
table(cut(CTVstats$acct_created, breaks = "6 month"))
table(cut(CTVstats$acct_created, breaks = "9 month"))
x <- users_data(botDS)
rm(x)
names(botAcctlist)
class(botAcctlist$url)
lookup_statuses(botDS$screenName)
x <- lookup_statuses(botDS$screenName)
x
names(latestStat)
x <- lookup_statuses(latestStat)
x <- lookup_statuses(latestStat[])
names(latestStatDF)
x <- botDS$screenName
y <- latestStatDF$screenName
setdff(x,y)
setdiff(x,y)
?setdiff
setdiff(y,x)
zed <- setdiff(x,y)
lookup_statuses(zed)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "dMs3guHk4y6DDdztO0JDmUTqB"
consumerSecret <- "csna8h6XWQMd3ZppMBCUuNNXDTuBAVJLNK7QphZRCd5plkES0z"
accessToken <- "1240280636-PTXARRUrytYtijYXyPWKptD9cHSCMzlAujQkATI"
accessTokenSecret <- "uo8INEJbhhe43AIXfSs5veSZ6i7IHbh8Tn1LLlYTJqOm2"
handle <- "conjja"
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
session_info()
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
??twitteR
library(twitteR)  ##package has been deprecated in deferment to _rtweet_
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
zeus <- lookup_statuses(zed)
lookup_statuses(zed)
zed
lookup_users(zed[1])
zeus <- lookupUsers(zed)
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
getUser(zed)
knitr::opts_chunk$set(echo = TRUE)
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
sessionInfo()
library(twitteR)
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
library(rtweet)
??rtweet
r <- search_tweets("r")
r
lookup_users(r)
users_data(r)
ts_data(r)
ts_data(CTV)
ts_plot(CTV)
ts_plot(groupedTweetsDF$created)
ts_plot(groupedTweetsDF)
ts_plot
ts_plot(botAcctlist)
names(botAcctlist)
names(groupedTweetsDF)
ts_plot(groupedTweetsDF)
ts_plot(botAcctlist)
recentCTV <- get_timelines(CTV$screen_name)
recentCTV <- get_timelines(CTV$screen_name[], n = 200)
users_data(r)
r <- search_tweets("rstats")
users_data(r)
recentCTV <- get_timelines(CTV$screen_name, n = 200)
CTV$screen_name
recentCTV <- getUser(CTV$screen_name, n = 200)
r <- CTV$screen_name
users_data(r)
recentCTV <- get_timelines(r)
CTV %>% recentCTV <- get_timeline(screenName())
CTV %>% recentCTV <- get_timeline(screen_name)
recentCTV <- getUser(CTV$screen_name, n = 200)
recentCTV <- get_timelines(CTV$screen_name, n = 200)
names(CTV)
library(quanteda)
divLang <- textstat_lexdiv(dfm(CTV$text))
divLang
summarise(divMean = mean(divLang))
library(tidyverse)
summarise(divMean = mean(divLang))
library(koRpus)
knitr::opts_chunk$set(echo = TRUE)
#using koRpus package
set.kRp.env(TT.cmd="/Applications/treetagger/cmd/tree-tagger-english", lang="en")
tagged.text <- treetag("./sample.txt", debug = TRUE)
tagged.text <- treetag(CTV$text)
warning()
tagged.text <- treetag(CTV$text[1])
CTV$text[1]
tagged2.text <- tokenize("./sample.txt", lang="en")
tagged2.text <- tokenize("./sample.txt")
describe(tagged2.text)
tagged2.text
descr.tagged.text <- describe(tagged.text)[["lttr.distrib"]]
lex.div(tagged.text)
tagged2.text
descr.tagged.text <- describe(tagged.text)[["lttr.distrib"]]
?describe
taggedText(tagged.text)
taggedText(tagged2.text)
View(divLang)
summarise(divMean = mean(divLang[,-1]))
str(langDiv)
str(divLang)
sum(is.infinite(divLang))
summarise(divMean = mean(divLang[,-1], na.rm = TRUE))
summarise(divMean = mean(divLang[,-1]) na.rm = TRUE)
?mean
langDiv
divLang
head(langDiv)
head(divLang)
emme <- divLang
rownames(emme) <- emme[,1]
rowname(emme) <- emme[,1]
emme[,1]
rownames(emme)
rownames(emme) <- emme[,-1]
rownames(langDiv)
rownames(emme) <- emme[,-1]
rownames(emme) <- emme[,1]
library(tibble)
data.frame(column_to_rownames(divLang, var = "document"))
head(divLang)
rawnames(divLang)
rawname(divLang)
data.frame(column_to_rownames(divLang, var = "document"))
rownames(emme) <- emme[,1]
emme <- emme[,-1]
rownames(emme) <- divLang[,1]
rownames(emme)
rm(emme)
length(is.NaN(divLang[,1:10]))
length(is.infinite(divLang[,1:10]))
is.infinite(divLang[])
str(divLang)
str(langDiv)
emme <- as.data.frame(divLang)
rownames(emme) <- emme[,1]
divLang <- as.data.frame(divLang)
rownames(divLang) <- divLang[,1]
head(divLang)
divLang <- divLang[,-1]
head(divLang)
summarise(divMean = mean(divLang) na.rm = TRUE)
CTVdiv <- summarise(divMean = mean(divLang) na.rm = TRUE)
summarise(divMean = mean(divLang), na.rm = TRUE)
summarise(divMean = mean(divLang, na.rm = TRUE))
summarise(divMean = mean(divLang))
mean(divLang[,1:10])
mean(divLang[,1:9])
CTVdiv
CTVdiv <- CTV %>% summarise(meanDiv = mean(divLang))
langDiv
divLang
mean(langDiv)
names(CTV)
x <- dfm(CTV$text)
ldiv <- textstat_lexdiv(x)
ldiv
str(ldiv)
rm(c("ldiv", "x"))
rm(c)
rm(x)
rm(ldiv)
CTVdiv
View(botDS)
mean(langDiv)
mean(langDiv, na.rm = TRUE)
str(langDiv)
mean(langDiv[,1:9], na.rm = TRUE)
sessionInfo()
library(tidyverse)
mean(langDiv)
str(langDiv)
divLang <- as.data.frame(textstat_lexdiv(dfm(CTV$text)))
library(quanteda)
divLang <- as.data.frame(textstat_lexdiv(dfm(CTV$text)))
str(divLang)
mean(divLang[,-1])
mean(divLang[,-1], na.rm = TRUE)
column_to_rownames(divLang, var = "document")
str(divLang)
is.NaN(divLang[,1:10])
is.na(divLang[,1:10])
is.infinite(divLang[,1:10])
is.nan(divLang[,1:10])
?summarise
summarise(divLang)
divLang
summarise(divLang[,-1])
summarise(mean(divLang[,-1]))
?is.nan
is.nan(divLang)
divLang %<% is.nan()
divLang %>% is.nan()
divLang %>% is.nan(.x)
divLang %>% is.nan(.x[,-1])
knitr::opts_chunk$set(echo = TRUE)
botDiv <- groupedTweetsDF %>%
group_by(screenName)
summarise(meanDiv = mean(langDiv))
botDiv <- groupedTweetsDF %>%
group_by(screenName)
summarise(meanDiv = mean(langDiv))
botDiv
langDiv
data.frame(column_to_rownames(divLang, var = "document"))
rownames(divLang) <- divLang[,1]
head
head(divLang)
divLang <- divLang[,-1]
head(divLang)
summarise(divLang)
summarise(divMean = mean(divLang))
divBot <- CTV %>% summarise(divMean = mean(divLang))
divBot <- CTV %>% summarise(divMean = mean(divLang, na.rm = TRUE))
do.call(divLang,lapply(DT, function(x) replace(x, is.infinite(x),NA)))
divLang <- as.data.frame(textstat_lexdiv(dfm(CTV$text)))
DT <- do.call(divLang,lapply(DT, function(x) replace(x, is.infinite(x),NA)))
divLang
divLang[ is.infinite(divLang) ] <- 0
divLang[ is.infinite() ] <- 0
is.infinite(divLang)
mapply(is.infinite(divLang))
divLang %>%
mapply(is.infinite, .x)
?mapply
?infinite
glimpse(divLang)
rownames(divLang[,-1]) <- divLang[,1]
glimpse(divLang)
divLang
rownames(divLang) <- divLang[,1]
divLang
divLang <- divLang[,1]
divLang
divLang <- as.data.frame(textstat_lexdiv(dfm(CTV$text)))
rownames(divLang) <- divLang[,1]
divLang <- divLang[,-1]
divLang
divLang[,]
divLang[,1:10]
divLang[,1:9]
mean(divLang[,1:9])
is.infinite(divLang[,1:9])
install.packages(c("awsMethods", "ddalpha", "lubridate", "openssl", "quantreg", "RcppEigen", "RGtk2", "seriation", "swirlify", "viridis"))
install.packages("awsMethods")
